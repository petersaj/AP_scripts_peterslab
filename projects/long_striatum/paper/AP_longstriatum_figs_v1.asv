%% Figures for longitudinal striatum+cortex project
%
% Data packaged in +Marica_2025.package namespace
%
% Uses `AP_longstriatum_load_data` to load/prep relevant data at the start
% of each figure. Doesn't re-load data if already loaded.
% 
% Each cell can be run independently, or whole script can be run through.
% If script run through, figure/stat saving is set at top.

tic

%% Set path to save figures and print stats (if script thru-run)

% Path to save figures
fig_savepath = fullfile(plab.locations.server_path,'Lab','Papers','Marica_2025','figures','matlab_figs');

% Filename to print stats
stat_savefn = fullfile(plab.locations.server_path,'Lab','Papers','Marica_2025','figures','matlab_figs','stats.txt');

% Set flag to overwrite save
if strcmp(getenv('USERNAME'),'petersa')
    % (safety catch: save only on AP's computer)
    user_confirm = strcmp(questdlg('Overwite saved figures?', ...
        'Confirm save','No','Yes','No'),'Yes');
    if user_confirm

        % (turn on flag to save figs)
        fig_save_flag = true;

        % (create stat file for writing)
        stat_fid = fopen(stat_savefn,'w');

        % (set stats to print to stat file)
        print_stat = @(varargin) print_stat(varargin{:});

        % (set function to save and close figures)

    end
else
    fig_save_flag = false;
end


%% [Fig 1X] Reaction stat and learning histogram

%%% Load data for figure
load_dataset = 'noact';
AP_longstriatum_load_data;
%%%

% Plot reaction time and association index, split within day
n_daysplit = 3;
use_rxn = cellfun(@(x) ~isnan(x),bhv.stim_to_move_nullmean,'uni',false);

rxn_mean_daysplit = cell2mat(cellfun(@(x,idx) ap.groupfun(@mean,x(idx), ...
    ap.quantile_bin(sum(idx),n_daysplit)),bhv.stim_to_move,use_rxn,'uni',false)')';

rxn_null_mean_daysplit = cell2mat(cellfun(@(x,idx) ap.groupfun(@mean,x(idx), ...
    ap.quantile_bin(sum(idx),n_daysplit)),bhv.stim_to_move_nullmean,use_rxn,'uni',false)')';

rxn_idx_daysplit = (rxn_null_mean_daysplit-rxn_mean_daysplit)./ ...
    (rxn_null_mean_daysplit+rxn_mean_daysplit);

[rxn_daysplit_mean,rxn_group_x] = ap.groupfun(@mean,rxn_mean_daysplit, ...
    bhv.days_from_learning);
rxn_null_daysplit_mean = ap.groupfun(@mean,rxn_null_mean_daysplit, ...
    bhv.days_from_learning);

rxn_idx_daysplit_mean = ap.groupfun(@mean,rxn_idx_daysplit, ...
    bhv.days_from_learning);
rxn_idx_daysplit_sem = ap.groupfun(@AP_sem,rxn_idx_daysplit, ...
    bhv.days_from_learning);

plot_days = -3:2;
plot_day_idx = ismember(rxn_group_x,plot_days);

figure('Name','Fig 1 rxn'); tiledlayout(2,1);
rxn_group_x_daysplit = rxn_group_x+(0:n_daysplit)./n_daysplit;

nexttile; hold on; set(gca,'YScale','log');
plot(reshape(rxn_group_x_daysplit(plot_day_idx,:)',[],1), ...
    reshape(padarray(rxn_daysplit_mean(plot_day_idx,:),[0,1],nan,'post')',[],1),'k','linewidth',2);
plot(reshape(rxn_group_x_daysplit(plot_day_idx,:)',[],1), ...
    reshape(padarray(rxn_null_daysplit_mean(plot_day_idx,:),[0,1],nan,'post')',[],1),'r','linewidth',2);
xline(0,'r');
ylabel('Reaction time');
xlabel('Day from learning');

nexttile;
errorbar(reshape(rxn_group_x_daysplit(plot_day_idx,:)',[],1), ...
    reshape(padarray(rxn_idx_daysplit_mean(plot_day_idx,:),[0,1],nan,'post')',[],1), ...
    reshape(padarray(rxn_idx_daysplit_sem(plot_day_idx,:),[0,1],nan,'post')',[],1),'k','linewidth',2);
xline(0,'r');
ylabel('Association index');
xlabel('Day from learning');
ap.prettyfig;


% Plot histogram of learning days
n_learned_day = cellfun(@(x) max([0, ...
    find(bhv.learned_days(strcmp(bhv.animal,x)),1)]), ...
    unique(bhv.animal,'stable'));
figure('Name','Fig S1 hist');
histogram(n_learned_day,-0.5:max(n_learned_day)+0.5,'FaceColor','k','EdgeColor','none');
ylabel('Number of mice');
xlabel('Days to learn');
ap.prettyfig;


%% [Fig 1D] Example widefield/units

%%% Load data for figure
load_dataset = 'noact';
AP_longstriatum_load_data;
%%%

% Choose animal and day to plot
use_animal = 'AP023';

animal_days = find(strcmp(bhv.animal,use_animal));
plot_days = [2,length(animal_days)];

figure('Name','Fig 1 examples');
h = tiledlayout(2,3);
title(h,sprintf('%s, days %d,%d',use_animal,plot_days));
for curr_rec_idx = plot_days

    % Load data from example recording
    use_rec = animal_days(curr_rec_idx);
    animal = bhv.animal{use_rec};
    rec_day = bhv.rec_day{use_rec};
    recordings = plab.find_recordings(animal,rec_day,'stim_wheel*');
    rec_time = recordings.recording{end};
    load_parts.ephys = true;
    ap.load_recording;

    % Plot widefield average
    nexttile(h);

    wf_day_path = plab.locations.filename('server',animal,rec_day,[],'widefield');
    mean_image_fn = fullfile(wf_day_path,sprintf('meanImage_blue.npy'));
    wf_avg = plab.wf.wf_align(readNPY(mean_image_fn),animal,rec_day);
    imagesc(wf_avg);
    ap.wf_draw('cortex','y');
    axis image off;
    clim([0,12000]);

    % Plot average domain map colored and combined
    domain_avg = ap.groupfun(@mean,ctx_str_maps.cortex_striatum_map{use_rec},[],[],domain_idx_rec{use_rec});

    col_lim = [0,0.01];
    domain_colored = nan([size(domain_avg),3]);
    for curr_domain = 1:n_domains
        curr_colormap = ap.colormap(['W',domain_color{curr_domain}],[],2);
        curr_map_gray = 1+round(mat2gray(domain_avg(:,:,curr_domain),col_lim).*(size(curr_colormap,1)-1));
        domain_colored(:,:,curr_domain,:) = reshape(curr_colormap(curr_map_gray,:),size(curr_map_gray,1),size(curr_map_gray,2),3,[]);
    end

    domain_colored_combined = squeeze(min(domain_colored,[],3));
    
    nexttile(h);
    image(domain_colored_combined)
    axis image off;
    ap.wf_draw('cortex',[0.5,0.5,0.5]);

    % Plot units and overlay clustering
    domain_color_rgb = [1,0,0;0,1,0;0,0,1];
    
    ax = nexttile(h); hold on;

    curr_domain_idx = domain_idx_rec{use_rec};
    domain_im = permute(domain_color_rgb(curr_domain_idx_nonan,:),[1,3,2]);
    imagesc(ax,[],ctx_str_maps.depth_group_edges{use_rec}/1000,domain_im);
    ax.YDir = 'reverse';

    spike_rate = (accumarray(findgroups(spike_templates),1)+1)/ ...
        range(spike_times_timelite);
    unit_dots = scatter( ...
        spike_rate,template_depths(unique(spike_templates))/1000,20,'k','filled');
    ylabel('Depth (mm)')
    xlabel('Spike rate')
    set(gca,'XScale','log');

end

ap.prettyfig;


%% [Fig 1X] Corticostriatal map pre/post learning

%%% Load data for figure
load_dataset = 'noact';
AP_longstriatum_load_data;
%%%

% Make map indicies (not done in load data)
wf_map_grp = struct;
wf_map_grp.ld = cell2mat(cellfun(@(idx,maps) repmat(idx,size(maps,3).*~isempty(maps),1), ...
    num2cell(bhv.days_from_learning),ctx_str_maps.cortex_striatum_map,'uni',false));
wf_map_grp.animal = cell2mat(cellfun(@(idx,maps) repmat(idx,size(maps,3).*~isempty(maps),1), ...
    num2cell(grp2idx(bhv.animal)),ctx_str_maps.cortex_striatum_map,'uni',false));

% Group pre/post learn days
plot_day_bins = [-Inf,-0,Inf];
plot_day_grp = discretize(max(wf_map_grp.ld,-inf),plot_day_bins);

% Get and plot average maps
[wf_map_avg,wf_map_avg_grp] = ap.nestgroupfun({@mean,@mean}, ...
    reshape(cat(3,ctx_str_maps.cortex_striatum_map{:}),prod(U_size),[])', ...
    wf_map_grp.animal,[plot_day_grp,domain_idx]);

figure('Name','Fig 1 cstr maps');
domain_color = {'R','G','B'};
h = tiledlayout(n_domains,length(plot_day_bins)-1,'TileSpacing','none');
for curr_domain = 1:n_domains
    for curr_day = 1:length(plot_day_bins)-1
        curr_data_idx = ismember(wf_map_avg_grp,[curr_day,curr_domain],'rows');
        
        nexttile;
        imagesc(reshape(wf_map_avg(curr_data_idx,:),size(U_master,[1,2])));
        axis image off;
        colormap(gca,ap.colormap(['W',domain_color{curr_domain}],[],2));
        clim([0,0.01]);
        ap.wf_draw('cortex',[0.5,0.5,0.5]);
    end
end

ap.prettyfig;


%% [Fig 1X] Striatal MUA pre/post learning

%%% Load data for figure
load_dataset = 'task';
AP_longstriatum_load_data;
%%%

plot_day_bins = [-Inf,0,Inf];
plot_day_grp = discretize(max(striatum_mua_grp.ld,-inf),plot_day_bins);
learn_colormap = ap.colormap('BKR',3);
prepost_colormap = max(0,learn_colormap([1,end],:)-0.2);

% Plot average task activity (pre/post learning)
stim_x = [-0.2,0.15];
move_x = [-0.05,0.4];
outcome_x = [-0.1,0.5];

figure('Name','Fig 1 mua'); h = tiledlayout(n_domains,3,'TileSpacing','tight');
for curr_depth = 1:n_domains

    curr_trials = striatum_mua_grp.domain_idx == curr_depth;

    % Stim
    nexttile; hold on; set(gca,'ColorOrder',prepost_colormap);
    curr_data_mean = ap.nestgroupfun({@nanmean,@nanmean}, ...
        striatum_mua(curr_trials,:,1),striatum_mua_grp.animal(curr_trials),plot_day_grp(curr_trials));
    curr_data_sem = ap.nestgroupfun({@nanmean,@AP_sem}, ...
        striatum_mua(curr_trials,:,1),striatum_mua_grp.animal(curr_trials),plot_day_grp(curr_trials));
    ap.errorfill(psth_t,curr_data_mean',curr_data_sem');
    xlim(stim_x);
    xline(0);

    % Move
    nexttile; hold on; set(gca,'ColorOrder',prepost_colormap);
    curr_data_mean = ap.nestgroupfun({@nanmean,@nanmean}, ...
        striatum_mua(curr_trials,:,2),striatum_mua_grp.animal(curr_trials),plot_day_grp(curr_trials));
    curr_data_sem = ap.nestgroupfun({@nanmean,@AP_sem}, ...
        striatum_mua(curr_trials,:,2),striatum_mua_grp.animal(curr_trials),plot_day_grp(curr_trials));
    ap.errorfill(psth_t,curr_data_mean',curr_data_sem');
    xlim(move_x);
    xline(0);

    % Outcome
    nexttile; hold on; set(gca,'ColorOrder',prepost_colormap);
    curr_data_mean = ap.nestgroupfun({@nanmean,@nanmean}, ...
        striatum_mua(curr_trials,:,3),striatum_mua_grp.animal(curr_trials),plot_day_grp(curr_trials));
    curr_data_sem = ap.nestgroupfun({@nanmean,@AP_sem}, ...
        striatum_mua(curr_trials,:,3),striatum_mua_grp.animal(curr_trials),plot_day_grp(curr_trials));
    ap.errorfill(psth_t,curr_data_mean',curr_data_sem');
    xlim(outcome_x);
    xline(0);

end
% (link all y, and x of same-alignment)
linkaxes(h.Children,'y');
for ax = 1:3
    linkaxes(h.Children(ax:3:end),'x');
end
% (set same data aspect to have same x-size)
[h.Children.DataAspectRatio] = deal(min(vertcat(h.Children.DataAspectRatio),[],1));
ap.prettyfig;


%% [Fig 2A,C] Task cortex + striatum trial heatmap (reaction-sorted)

%%% Load data for figure
load_dataset = 'task';
AP_longstriatum_load_data;
%%%

plot_day_bins = [-Inf,-2,0,Inf];
cortex_plot_day_grp = discretize(max(wf_grp.ld,-inf),plot_day_bins);
striatum_plot_day_grp = discretize(max(striatum_mua_grp.ld,-inf),plot_day_bins);


% Plot heatmaps sorted by reaction times
heatmap_smooth = [20,1]; % ([trials,time] to smooth for graphics)

figure('Name','Fig 2 heatmaps'); 
h = tiledlayout(n_domains*2,max(cortex_plot_day_grp), ...
    'TileIndexing','ColumnMajor','TileSpacing','Tight');
for curr_day = unique(cortex_plot_day_grp)'
    for curr_domain = 1:n_domains

        % Cortex
        nexttile;
        curr_trials = find(cortex_plot_day_grp == curr_day);
       
        [sorted_rxn,sort_idx] = sort(wf_grp.rxn(curr_trials));
        imagesc(wf_t,[],movmean(wf_striatum_roi(curr_trials(sort_idx),:,curr_domain,1),heatmap_smooth));
        colormap(gca,ap.colormap('WG'));
        clim([0,1e-2]);
        axis off;

        hold on
        xline(0,'color','r');
        plot(sorted_rxn,1:length(curr_trials),'b');

        if curr_domain == 1
            title(sprintf('%d:%d',plot_day_bins(curr_day),plot_day_bins(curr_day+1)));
        end

        % Striatum
        nexttile;
        curr_trials = find(striatum_plot_day_grp == curr_day & striatum_mua_grp.domain_idx == curr_domain);
      
        [sorted_rxn,sort_idx] = sort(striatum_mua_grp.rxn(curr_trials));      
        imagesc(psth_t,[],movmean(striatum_mua(curr_trials(sort_idx),:,1),heatmap_smooth));
        colormap(gca,ap.colormap('WK'));
        clim([0,3]);
        axis off;

        hold on
        xline(0,'color','r');
        plot(sorted_rxn,1:length(curr_trials),'b');

    end
end
linkaxes(h.Children,'x');
xlim(h.Children,[-0.5,1])
ap.prettyfig;


%% [Fig 2B,E] Task cortex + striatum average PSTH w/o movement

%%% Load data for figure
load_dataset = 'task';
AP_longstriatum_load_data;
%%%

plot_day_bins = [-Inf,-1,0,Inf];
striatum_plot_day_grp = discretize(max(striatum_mua_grp.ld,-inf),plot_day_bins);
cortex_plot_day_grp = discretize(max(wf_grp.ld,-inf),plot_day_bins);

% NaN-out activity after movement onset (minus leeway time)
move_leeway = 0.1; % time pre-movement to exclude
striatum_mua_nomove = striatum_mua(:,:,1).*ap.nanout(psth_t > striatum_mua_grp.rxn-move_leeway);
wf_striatum_roi_nomove = wf_striatum_roi(:,:,:,1).*ap.nanout(wf_t > wf_grp.rxn-move_leeway);

% Get average and SEM no-movement activity
[striatum_mua_nomove_avg,striatum_mua_nomove_avg_grp] = ...
    ap.nestgroupfun({@nanmean,@nanmean},striatum_mua_nomove, ...
    striatum_mua_grp.animal,[striatum_plot_day_grp,striatum_mua_grp.domain_idx]);
striatum_mua_nomove_sem = ...
    ap.nestgroupfun({@nanmean,@AP_sem},striatum_mua_nomove, ...
    striatum_mua_grp.animal,[striatum_plot_day_grp,striatum_mua_grp.domain_idx]);

[wf_striatum_roi_nomove_avg,wf_striatum_roi_nomove_avg_grp] = ...
    ap.nestgroupfun({@nanmean,@nanmean},wf_striatum_roi_nomove, ...
    wf_grp.animal,cortex_plot_day_grp);
wf_striatum_roi_nomove_sem = ...
    ap.nestgroupfun({@nanmean,@AP_sem},wf_striatum_roi_nomove, ...
    wf_grp.animal,cortex_plot_day_grp);

str_day_color = ap.colormap('KW',length(plot_day_bins)-1);
ctx_day_color = ap.colormap('KG',length(plot_day_bins)-1);
figure('Name','Fig 2 psth'); h = tiledlayout(n_domains*2,1,'TileSpacing','tight');
for curr_domain = 1:n_domains

    nexttile; hold on; set(gca,'ColorOrder',ctx_day_color);
    ap.errorfill(wf_t,wf_striatum_roi_nomove_avg(:,:,curr_domain)', ...
        wf_striatum_roi_nomove_sem(:,:,curr_domain)');

    nexttile; hold on; set(gca,'ColorOrder',str_day_color);
    plot_data_idx = striatum_mua_nomove_avg_grp(:,2) == curr_domain;
    ap.errorfill(psth_t,striatum_mua_nomove_avg(plot_data_idx,:)', ...
        striatum_mua_nomove_sem(plot_data_idx,:)');

end

linkaxes(h.Children(1:2:end));
linkaxes(h.Children(2:2:end));
xlim(h.Children,[-0.1,0.5]);
ap.prettyfig;

% ~~~ STATS ~~~
compare_day_grps = [1,2];

stim_t = [0,0.2];
cortex_stim_t = isbetween(wf_t,stim_t(1),stim_t(2));
striatum_stim_t = isbetween(psth_t,stim_t(1),stim_t(2));

[wf_striatum_roi_nomove_animal,wf_striatum_roi_nomove_animal_grp] = ...
    ap.groupfun(@nanmean,wf_striatum_roi_nomove, ...
    [wf_grp.animal,cortex_plot_day_grp]);
wf_striatum_roi_nomove_animal_tmax = max(wf_striatum_roi_nomove_animal(:,cortex_stim_t,:),[],2);

cortex_stat_usedata = ismember(wf_striatum_roi_nomove_animal_grp(:,2),compare_day_grps);
cortex_stat_meas = permute(diff(ap.groupfun(@mean,wf_striatum_roi_nomove_animal_tmax(cortex_stat_usedata,:,:), ...
    wf_striatum_roi_nomove_animal_grp(cortex_stat_usedata,2)),[],1),[3,2,1]);

[striatum_mua_nomove_animal,striatum_mua_nomove_animal_grp] = ...
    ap.groupfun(@nanmean,striatum_mua_nomove, ...
    [striatum_mua_grp.animal,striatum_plot_day_grp,striatum_mua_grp.domain_idx]);
striatum_mua_nomove_animal_tmax = max(striatum_mua_nomove_animal(:,striatum_stim_t),[],2);

striatum_stat_usedata = ismember(striatum_mua_nomove_animal_grp(:,2),compare_day_grps);
striatum_stat_meas = ap.nestgroupfun({@mean,@diff},striatum_mua_nomove_animal_tmax(striatum_stat_usedata), ...
    striatum_mua_nomove_animal_grp(striatum_stat_usedata,2),striatum_mua_nomove_animal_grp(striatum_stat_usedata,3));

n_shuff = 10000;
cortex_stat_null = nan(n_domains,n_shuff);
striatum_stat_null = nan(n_domains,n_shuff);
for curr_shuff = 1:n_shuff

    curr_ctx_shuff = ...
        ap.shake(wf_striatum_roi_nomove_animal_tmax(cortex_stat_usedata,:,:),1);
    cortex_stat_null(:,curr_shuff) = ...
        permute(diff(ap.groupfun(@mean,curr_ctx_shuff, ...
        wf_striatum_roi_nomove_animal_grp(cortex_stat_usedata,2)),[],1),[3,2,1]);

    curr_str_shuff = ...
        ap.shake(striatum_mua_nomove_animal_tmax(striatum_stat_usedata),1, ...
        striatum_mua_nomove_animal_grp(striatum_stat_usedata,3));
    striatum_stat_null(:,curr_shuff) = ...
        ap.nestgroupfun({@mean,@diff},curr_str_shuff, ...
        striatum_mua_nomove_animal_grp(striatum_stat_usedata,2),striatum_mua_nomove_animal_grp(striatum_stat_usedata,3));

end

print_stat('\n--FIG 2--\n');
print_stat('Average PSTH tmax, day grps %d,%d:\n',compare_day_grps);

cortex_stat_rank = tiedrank([cortex_stat_meas,cortex_stat_null]')';
cortex_stat_p = 1-cortex_stat_rank(:,1)/(n_shuff+1);
cortex_stat_sig = discretize(cortex_stat_p < 0.05,[0,1,Inf],{'','*'});
for curr_domain = 1:n_domains
    print_stat('CTX%d p = %.2g%s\n',curr_domain,cortex_stat_p(curr_domain),cortex_stat_sig{curr_domain});
end

striatum_stat_rank = tiedrank([striatum_stat_meas,striatum_stat_null]')';
striatum_stat_p = 1-striatum_stat_rank(:,1)/(n_shuff+1);
striatum_stat_sig = discretize(striatum_stat_p < 0.05,[0,1,Inf],{'','*'});
for curr_domain = 1:n_domains
    print_stat('STR%d p = %.2g%s\n',curr_domain,striatum_stat_p(curr_domain),striatum_stat_sig{curr_domain});
end


%% [Fig 2X] Task cortex + striatum max, split within session

%%% Load data for figure
load_dataset = 'task';
AP_longstriatum_load_data;
%%%

rxn_cutoff = 0.3; % only plot trials with slow reaction times

plot_day_bins = [-Inf,-2:0,0.5];
striatum_plot_day_grp = discretize(max(striatum_mua_grp.ld,-inf),plot_day_bins);
cortex_plot_day_grp = discretize(max(wf_grp.ld,-inf),plot_day_bins);

% Split by trial percentile within day
n_split = 4;

striatum_split_idx = cell2mat(cellfun(@(n_trials,n_mua) ...
    reshape(repmat(ap.quantile_bin(n_trials,n_split),1,n_mua),[],1), ...
    num2cell(striatum_trials_rec_n),num2cell(striatum_mua_rec_n),'uni',false));

cortex_split_idx = cell2mat(cellfun(@(n_trials) ...
    ap.quantile_bin(n_trials,n_split), ...
    num2cell(cortex_trials_rec_n),'uni',false));

% For bins that contain multiple days: don't split within day
% (doesn't makes sense to average splits across days)
striatum_split_idx(ismember(striatum_plot_day_grp,find(diff(plot_day_bins) > 1))) = 1;
cortex_split_idx(ismember(cortex_plot_day_grp,find(diff(plot_day_bins) > 1))) = 1;

% Get activity: trial mean > time max > animal mean 
stim_t = [0,0.2];

% (striatum)
striatum_use_trials = striatum_mua_grp.rxn > rxn_cutoff;
[striatum_activity_mean,striatum_activity_mean_grp] = ap.groupfun(@mean,striatum_mua(striatum_use_trials,:,1), ...
    [striatum_mua_grp.animal(striatum_use_trials),striatum_plot_day_grp(striatum_use_trials), ...
    striatum_split_idx(striatum_use_trials),striatum_mua_grp.domain_idx(striatum_use_trials)]);

striatum_activity_max = max(striatum_activity_mean(:,isbetween(psth_t,stim_t(1),stim_t(2))),[],2);
[striatum_activity_max_avg,striatum_activity_max_grp] = ap.nestgroupfun({@mean,@mean},striatum_activity_max,striatum_activity_mean_grp(:,1),striatum_activity_mean_grp(:,2:end));
striatum_activity_max_sem = ap.nestgroupfun({@mean,@AP_sem},striatum_activity_max,striatum_activity_mean_grp(:,1),striatum_activity_mean_grp(:,2:end));

% (cortex)
cortex_use_trials = wf_grp.rxn > rxn_cutoff;
[cortex_activity_mean,cortex_activity_mean_grp] = ap.groupfun(@mean,wf_striatum_roi(cortex_use_trials,:,:,1), ...
    [wf_grp.animal(cortex_use_trials),cortex_plot_day_grp(cortex_use_trials),cortex_split_idx(cortex_use_trials)]);

cortex_activity_max = permute(max(cortex_activity_mean(:,isbetween(wf_t,stim_t(1),stim_t(2)),:),[],2),[1,3,2]);

[cortex_activity_max_avg,cortex_activity_max_grp] = ap.nestgroupfun({@mean,@mean},cortex_activity_max,cortex_activity_mean_grp(:,1),cortex_activity_mean_grp(:,2:end));
cortex_activity_max_sem = ap.nestgroupfun({@mean,@AP_sem},cortex_activity_max,cortex_activity_mean_grp(:,1),cortex_activity_mean_grp(:,2:end));

% Plot cortex and striatum overlaid
figure('Name','Fig 2 session split');
h = tiledlayout(n_domains,length(plot_day_bins)-1,'TileSpacing','compact');
for curr_domain = 1:n_domains
    for curr_day = 1:length(plot_day_bins)-1
        nexttile; hold on;

        yyaxis left;
        curr_cortex_data_idx = cortex_activity_max_grp(:,1) == curr_day;
        if sum(curr_cortex_data_idx) > 1
            ap.errorfill(1:sum(curr_cortex_data_idx),cortex_activity_max_avg(curr_cortex_data_idx,curr_domain), ...
                cortex_activity_max_sem(curr_cortex_data_idx),[0,0.6,0],0.5,false,2);
        else
            errorbar(cortex_activity_max_avg(curr_cortex_data_idx,curr_domain), ...
                cortex_activity_max_sem(curr_cortex_data_idx),'color',[0,0.6,0],'linewidth',4, ...
                'CapSize',0);
        end

        yyaxis right;
        curr_striatum_data_idx = striatum_activity_max_grp(:,1) == curr_day & ...
            striatum_activity_max_grp(:,3) == curr_domain;
        errorbar(striatum_activity_max_avg(curr_striatum_data_idx), ...
            striatum_activity_max_sem(curr_striatum_data_idx),'k','linewidth',2, ...
            'CapSize',0);

        if curr_domain == 1
            title(sprintf('%d:%g',plot_day_bins(curr_day),plot_day_bins(curr_day+1)));
        end
    end
end

% Set axis limits
for curr_ax = 1:length(h.Children)
    yyaxis(h.Children(curr_ax),'left');
end
linkaxes(h.Children);
ylim(h(1).Children,[0,8e-3]);
[h.Children.YColor] = deal([0,0.5,0]);

for curr_ax = 1:length(h.Children)
    yyaxis(h.Children(curr_ax),'right');
end
linkaxes(h.Children);
ylim(h(1).Children,[-0.2,8]);
[h.Children.YColor] = deal([0,0,0]);

xlim(h(1).Children,[0.8,n_split+0.2])

ap.prettyfig;

% ~~~ STATS ~~~
frpintf(stat_fid,'\n--FIG 2--\n');
print_stat('Session-split 1-way ANOVA:');
for curr_domain = 1:n_domains
    for curr_day = 1:length(plot_day_bins)-1
        stat_data_idx = ismember(striatum_activity_mean_grp(:,[2,4]),[curr_day,curr_domain],'rows');
        p = anovan(striatum_activity_max(stat_data_idx),striatum_activity_mean_grp(stat_data_idx,3),'display','off');
        stat_sig = discretize(p < 0.05,[0,1,Inf],["","*"]);
        print_stat('STR %d, day grp %d, p = %.2g%s\n',curr_domain,curr_day,p,stat_sig)
    end
end
for curr_domain = 1:n_domains
    for curr_day = 1:length(plot_day_bins)-1
        stat_data_idx = cortex_activity_mean_grp(:,2) == curr_day;
        p = anovan(cortex_activity_max(stat_data_idx,curr_domain),cortex_activity_mean_grp(stat_data_idx,3),'display','off');
        stat_sig = discretize(p < 0.05,[0,1,Inf],["","*"]);
        print_stat('CTX %d, day grp %d, p = %.2g%s\n',curr_domain,curr_day,p,stat_sig)
    end
end


%% [Fig 3X] Passive Cortex + striatum PSTH

%%% Load data for figure
load_dataset = 'passive';
AP_longstriatum_load_data;
%%%

plot_day_bins = [-Inf,-2,0,2,Inf];
striatum_plot_days_grp = discretize(max(striatum_mua_grp.ld,-inf),plot_day_bins);
cortex_plot_day_grp = discretize(max(wf_grp.ld,-inf),plot_day_bins);

[striatum_mua_avg,striatum_mua_avg_grp] = ...
    ap.nestgroupfun({@mean,@mean}, ...
    striatum_mua,striatum_mua_grp.animal, ...
    [striatum_plot_days_grp,striatum_mua_grp.stim,striatum_mua_grp.domain_idx]);
striatum_mua_sem = ap.nestgroupfun({@mean,@AP_sem}, ...
    striatum_mua,striatum_mua_grp.animal, ...
    [striatum_plot_days_grp,striatum_mua_grp.stim,striatum_mua_grp.domain_idx]);

[wf_striatum_roi_avg,wf_striatum_roi_avg_grp] = ...
    ap.nestgroupfun({@mean,@mean},wf_striatum_roi, ...
    wf_grp.animal,[cortex_plot_day_grp,cell2mat(wf.trial_stim_values)]);
wf_striatum_roi_sem = ...
    ap.nestgroupfun({@mean,@AP_sem},wf_striatum_roi, ...
    wf_grp.animal,[cortex_plot_day_grp,cell2mat(wf.trial_stim_values)]);

unique_stim = unique(striatum_mua_grp.stim);
stim_color = {'KB','KW','KR'};

figure('Name','Fig 3 psth');
h = tiledlayout(n_domains*2,max(striatum_plot_days_grp)*length(unique_stim), ...
    'TileIndexing','ColumnMajor','TileSpacing','tight');
for curr_stim = unique_stim'

    [~,curr_stim_idx] = ismember(curr_stim,unique_stim);
    day_colormap = ap.colormap(stim_color{curr_stim_idx},length(plot_day_bins)-1);

    for curr_day = 1:length(plot_day_bins)-1
        for curr_domain = 1:n_domains

            % (cortex)
            nexttile; axis off;
            curr_data_idx = wf_striatum_roi_avg_grp(:,1) == curr_day & ...
                wf_striatum_roi_avg_grp(:,2) == curr_stim;
            ap.errorfill(wf_t,wf_striatum_roi_avg(curr_data_idx,:,curr_domain), ...
                wf_striatum_roi_sem(curr_data_idx,:,curr_domain), ...
                day_colormap(curr_day,:));

            % (striatum)
            nexttile; axis off;
            curr_data_idx = striatum_mua_avg_grp(:,1) == curr_day & ...
                striatum_mua_avg_grp(:,2) == curr_stim & ...
                striatum_mua_avg_grp(:,3) == curr_domain;
            ap.errorfill(psth_t,striatum_mua_avg(curr_data_idx,:),striatum_mua_sem(curr_data_idx,:), ...
                day_colormap(curr_day,:));

        end
    end
end
linkaxes(h.Children(1:2:end),'y');
linkaxes(h.Children(2:2:end),'y');
xlim(h.Children,[0,0.5]);
ap.prettyfig;


%% [Fig 3X] Passive cortex + striatum max

%%% Load data for figure
load_dataset = 'passive';
AP_longstriatum_load_data;
%%%

plot_day_bins = [-Inf,-2,0,2,Inf];
cortex_plot_day_grp = discretize(max(wf_grp.ld,-inf),plot_day_bins);
striatum_plot_days_grp = discretize(max(striatum_mua_grp.ld,-inf),plot_day_bins);

% Average day, get max in time window
stim_t = [0,0.2];
cortex_stim_t = isbetween(wf_t,stim_t(1),stim_t(2));
striatum_stim_t = isbetween(psth_t,stim_t(1),stim_t(2));

% (cortex)
[wf_striatum_roi_dayavg,wf_striatum_roi_grp] = ...
    ap.nestgroupfun({@mean,@mean},wf_striatum_roi, ...
    (1:size(wf_striatum_roi,1))', ...
    [wf_grp.animal,cortex_plot_day_grp,cell2mat(wf.trial_stim_values)]);

wf_striatum_roi_max = max(wf_striatum_roi_dayavg(:,cortex_stim_t,:),[],2);

[wf_striatum_roi_max_avg,wf_striatum_roi_max_avg_grp] = ...
    ap.nestgroupfun({@mean,@mean},wf_striatum_roi_max, ...
    wf_striatum_roi_grp(:,1),wf_striatum_roi_grp(:,2:3));

wf_striatum_roi_max_sem = ...
    ap.nestgroupfun({@mean,@AP_sem},wf_striatum_roi_max, ...
    wf_striatum_roi_grp(:,1),wf_striatum_roi_grp(:,2:3));

% (striatum)
[striatum_mua_dayavg,striatum_mua_dayavg_grp] = ...
    ap.groupfun(@mean,striatum_mua, ...
    [striatum_mua_grp.animal,striatum_plot_days_grp,striatum_mua_grp.stim,striatum_mua_grp.domain_idx]);

striatum_mua_dayavg_tmax = max(striatum_mua_dayavg(:,striatum_stim_t),[],2);

[striatum_mua_max_avg,striatum_mua_max_grp] = ap.nestgroupfun({@mean,@mean}, ...
    striatum_mua_dayavg_tmax,striatum_mua_dayavg_grp(:,1), ...
    striatum_mua_dayavg_grp(:,2:end));
striatum_mua_max_sem = ap.nestgroupfun({@mean,@AP_sem}, ...
    striatum_mua_dayavg_tmax,striatum_mua_dayavg_grp(:,1), ...
    striatum_mua_dayavg_grp(:,2:end));

% Plot activity by day
figure('Name','Fig 3 tmax');
h = tiledlayout(n_domains,2,'TileSpacing','tight');
stim_colormap = ap.colormap('BKR',3);
binned_days_x = interp1(find(~isinf(plot_day_bins)),...
    plot_day_bins(~isinf(plot_day_bins)),1:length(plot_day_bins)-1,'linear','extrap');
for curr_domain = 1:size(striatum_wf_roi,3)
    % (cortex)
    nexttile; hold on;
    set(gca,'ColorOrder',stim_colormap);
    errorbar(binned_days_x, ...
        reshape(wf_striatum_roi_max_avg(:,:,curr_domain),[],length(plot_day_bins)-1)', ...
        reshape(wf_striatum_roi_max_sem(:,:,curr_domain),[],length(plot_day_bins)-1)', ...
        'linewidth',2);
    ylabel('Max \DeltaF/F_0');
    axis padded
    xline(0);

    % (striatum)
    nexttile; hold on; 
    set(gca,'ColorOrder',stim_colormap);
    curr_str_idx = striatum_mua_max_grp(:,3) == curr_domain;
    errorbar(binned_days_x, ...
        reshape(striatum_mua_max_avg(curr_str_idx),[],length(plot_day_bins)-1)', ...
        reshape(striatum_mua_max_sem(curr_str_idx),[],length(plot_day_bins)-1)', ...
        'linewidth',2);
    ylabel('Max \DeltaR/R_0');
    axis padded
    xline(0);
end
linkaxes(h.Children(1:2:end),'xy');
linkaxes(h.Children(2:2:end),'xy');

ap.prettyfig;

% ~~~ STATS ~~~
% (compare day i to i+1)
frpintf(stat_fid,'\n--FIG 3--\n');
frpintf(stat_fid,'PSTH max');
for curr_compare_day = 1:length(plot_day_bins)-2

    compare_day_grps = curr_compare_day+[0,1];

    cortex_stat_usedata = ismember(wf_striatum_roi_grp(:,2),compare_day_grps);
    [cortex_stat_meas,cortex_stat_grp] = ap.nestgroupfun({@mean,@diff},wf_striatum_roi_max(cortex_stat_usedata,:,:), ...
        wf_striatum_roi_grp(cortex_stat_usedata,2),wf_striatum_roi_grp(cortex_stat_usedata,3));

    striatum_stat_usedata = ismember(striatum_mua_dayavg_grp(:,2),compare_day_grps);
    [striatum_stat_meas,striatum_stat_grp] = ap.nestgroupfun({@mean,@diff},striatum_mua_dayavg_tmax(striatum_stat_usedata), ...
        striatum_mua_dayavg_grp(striatum_stat_usedata,2),striatum_mua_dayavg_grp(striatum_stat_usedata,3:end));

    [~,~,cortex_shuff_grp] = unique(wf_striatum_roi_grp(cortex_stat_usedata,[1,3]),'rows');
    [~,~,striatum_shuff_grp] = unique(striatum_mua_dayavg_grp(striatum_stat_usedata,[1,3,4]),'rows');

    n_shuff = 10000;
    cortex_stat_null = nan(size(cortex_stat_meas,1),n_shuff,n_domains);
    striatum_stat_null = nan(length(striatum_stat_meas),n_shuff);
    for curr_shuff = 1:n_shuff
        cortex_data_shuff = ap.shake(wf_striatum_roi_max(cortex_stat_usedata,:,:),1,cortex_shuff_grp);
        cortex_stat_null(:,curr_shuff,:) = ap.nestgroupfun({@mean,@diff},cortex_data_shuff, ...
            wf_striatum_roi_grp(cortex_stat_usedata,2),wf_striatum_roi_grp(cortex_stat_usedata,3));

        striatum_data_shuff = ap.shake(striatum_mua_dayavg_tmax(striatum_stat_usedata),1,striatum_shuff_grp);
        striatum_stat_null(:,curr_shuff) = ap.nestgroupfun({@mean,@diff},striatum_data_shuff, ...
            striatum_mua_dayavg_grp(striatum_stat_usedata,2),striatum_mua_dayavg_grp(striatum_stat_usedata,3:end));
    end

    cortex_stat_rank = permute(tiedrank(permute([cortex_stat_meas,cortex_stat_null],[2,1,3])),[2,1,3]);
    cortex_stat_p = 1-cortex_stat_rank(:,1,:)/(n_shuff+1);

    striatum_stat_rank = tiedrank([striatum_stat_meas,striatum_stat_null]')';
    striatum_stat_p = 1-striatum_stat_rank(:,1)/(n_shuff+1);

    print_stat('Cortex: day grps %d vs %d\n',compare_day_grps);
    stat_sig = discretize(cortex_stat_p < 0.05,[0,1,Inf],["","*"]);
    for curr_domain = 1:n_domains
        for curr_stim = unique(cortex_stat_grp(:,1))'
            curr_stat_idx = ismember(cortex_stat_grp,curr_stim,'rows');
            print_stat('ROI%d, Stim %3.f, p = %.2g%s\n', ...
                curr_domain,cortex_stat_grp(curr_stat_idx),cortex_stat_p(curr_stat_idx,1,curr_domain),stat_sig(curr_stat_idx,1,curr_domain));
        end
    end

    print_stat('Striatum: day grps %d vs %d\n',compare_day_grps);
    stat_sig = discretize(striatum_stat_p < 0.05,[0,1,Inf],["","*"]);
    for curr_domain = 1:n_domains
        for curr_stim = unique(striatum_stat_grp(:,1))'
            curr_stat_idx = ismember(striatum_stat_grp,[curr_stim,curr_domain],'rows');
            print_stat('D%d, Stim %3.f, p = %.2g%s\n', ...
                curr_domain,striatum_stat_grp(curr_stat_idx,1),striatum_stat_p(curr_stat_idx),stat_sig(curr_stat_idx));
        end
    end
end

% (compare C to R stim within-day)
frpintf(stat_fid,'PSTH max stim comparison');
compare_stim = [0,90];

cortex_stat_usedata = ismember(wf_striatum_roi_grp(:,3),compare_stim);
[cortex_stat_meas,cortex_stat_grp] = ap.nestgroupfun({@mean,@diff},wf_striatum_roi_max(cortex_stat_usedata,:,:), ...
    wf_striatum_roi_grp(cortex_stat_usedata,3),wf_striatum_roi_grp(cortex_stat_usedata,2));

striatum_stat_usedata = ismember(striatum_mua_dayavg_grp(:,3),compare_stim);
[striatum_stat_meas,striatum_stat_grp] = ap.nestgroupfun({@mean,@diff},striatum_mua_dayavg_tmax(striatum_stat_usedata), ...
    striatum_mua_dayavg_grp(striatum_stat_usedata,3),striatum_mua_dayavg_grp(striatum_stat_usedata,[2,4]));

[~,~,cortex_shuff_grp] = unique(wf_striatum_roi_grp(cortex_stat_usedata,[1,2]),'rows');
[~,~,striatum_shuff_grp] = unique(striatum_mua_dayavg_grp(striatum_stat_usedata,[1,2,4]),'rows');

n_shuff = 10000;
cortex_stat_null = nan(size(cortex_stat_meas,1),n_shuff,n_domains);
striatum_stat_null = nan(length(striatum_stat_meas),n_shuff);
for curr_shuff = 1:n_shuff
    cortex_data_shuff = ap.shake(wf_striatum_roi_max(cortex_stat_usedata,:,:),1,cortex_shuff_grp);
    cortex_stat_null(:,curr_shuff,:) = ap.nestgroupfun({@mean,@diff},cortex_data_shuff, ...
    wf_striatum_roi_grp(cortex_stat_usedata,3),wf_striatum_roi_grp(cortex_stat_usedata,2));

    striatum_data_shuff = ap.shake(striatum_mua_dayavg_tmax(striatum_stat_usedata),1,striatum_shuff_grp);
    striatum_stat_null(:,curr_shuff) = ap.nestgroupfun({@mean,@diff},striatum_data_shuff, ...
    striatum_mua_dayavg_grp(striatum_stat_usedata,3),striatum_mua_dayavg_grp(striatum_stat_usedata,[2,4]));
end

cortex_stat_rank = permute(tiedrank(permute([cortex_stat_meas,cortex_stat_null],[2,1,3])),[2,1,3]);
cortex_stat_p = 1-cortex_stat_rank(:,1,:)/(n_shuff+1);

striatum_stat_rank = tiedrank([striatum_stat_meas,striatum_stat_null]')';
striatum_stat_p = 1-striatum_stat_rank(:,1)/(n_shuff+1);

print_stat('Cortex: Stim %d vs %d\n',compare_stim);
stat_sig = discretize(cortex_stat_p,[-Inf,0.05,0.95,Inf],["*-","","*+"]);
for curr_domain = 1:n_domains
    for curr_day = 1:length(plot_day_bins)-1
        curr_stat_idx = ismember(cortex_stat_grp,curr_day,'rows');
        print_stat('ROI%d, Day %d, p = %.2g%s\n', ...
            curr_domain,cortex_stat_grp(curr_stat_idx),cortex_stat_p(curr_stat_idx,1,curr_domain),stat_sig(curr_stat_idx,1,curr_domain));
    end
end

print_stat('Striatum: Stim %d vs %d\n',compare_stim);
stat_sig = discretize(striatum_stat_p,[-Inf,0.05,0.95,Inf],["*-","","*+"]);
for curr_domain = 1:n_domains
    for curr_day = 1:length(plot_day_bins)-1
        curr_stat_idx = ismember(striatum_stat_grp,[curr_day,curr_domain],'rows');
        print_stat('D%d, Day %d, p = %.2g%s\n', ...
            curr_domain,striatum_stat_grp(curr_stat_idx,1),striatum_stat_p(curr_stat_idx),stat_sig(curr_stat_idx));
    end
end


%% [Fig 4X] Passive striatum cell types and single-unit responses

%%% Load data for figure
load_dataset = 'passive';
AP_longstriatum_load_data;
%%%

plot_domains = 1:2;

% Set stim to compare, and colors
compare_stim = [2,3]; % C, R stim
stim_1_color = [0,0,0.8];
stim_2_color = [0.8,0,0];

% Get max response in window
use_t = psth_t > 0.05 & psth_t < 0.15;
unit_psth_max = permute(max(striatum_sua(:,use_t,:),[],2),[1,3,2]);

plot_day_bins = [-Inf,-2,0,Inf];
unit_plot_day_grp = discretize(striatum_sua_grp.ld,plot_day_bins);

% Get responsive units
unit_responsive_p_thresh = 0.99;
unit_responsive = cell2mat(horzcat(ephys.unit_resp_p_value{:})') > unit_responsive_p_thresh;
striatum_units_responsive = unit_responsive(cell2mat(striatum_units),:);

% Set celltypes to loop through
striatum_celltypes = ["msn","fsi","tan"];

figure('Name','Fig 4 scatter bar');
h = tiledlayout(length(striatum_celltypes),2, ...
    'TileSpacing','tight','TileIndexing','columnmajor');

% Scatter plots R vs C (days combined)
example_units = nan(length(striatum_celltypes),2);
h_scatter = gobjects(size(striatum_celltypes));
for curr_celltype = striatum_celltypes

    curr_units = ...
        ismember(striatum_sua_grp.domain_idx,plot_domains) & ...
        any(striatum_units_responsive(:,compare_stim),2) & ...
        striatum_sua_grp.(curr_celltype);

    curr_dot_size = 15;
    curr_dot_color = ...
        stim_1_color.*striatum_units_responsive(curr_units,compare_stim(1)) + ...
        stim_2_color.*striatum_units_responsive(curr_units,compare_stim(2));

    [~,curr_celltype_idx] = ismember(curr_celltype,striatum_celltypes);
    h_scatter(curr_celltype_idx) = nexttile; hold on;
    scatter(unit_psth_max(curr_units,2),unit_psth_max(curr_units,3), ...
        curr_dot_size,curr_dot_color,'filled');

    ax_range = [min([xlim,ylim]),max([xlim,ylim])];
    xlim(ax_range);ylim(ax_range);
    axis(h_scatter(curr_celltype_idx),'square')
    title(curr_celltype);

end

% Fraction [R,R+C] as stacked barplot over days
for curr_celltype = striatum_celltypes

    use_units = ismember(striatum_sua_grp.domain_idx,plot_domains) & ...
        striatum_sua_grp.(curr_celltype);

    striatum_units_responsive_2_12 = permute(all(striatum_units_responsive(:,compare_stim) == ...
        cat(3,[0,1],[1,1]),2),[1,3,2]);

    [unit_responsive_mean,unit_responsive_mean_group] = ap.nestgroupfun({@mean,@mean}, ...
        +striatum_units_responsive_2_12(use_units,:), ...
        striatum_sua_grp.animal(use_units), ...
        unit_plot_day_grp(use_units));

    unit_responsive_sem = ap.nestgroupfun({@mean,@AP_sem}, ...
        +striatum_units_responsive_2_12(use_units,:), ...
        striatum_sua_grp.animal(use_units), ...
        unit_plot_day_grp(use_units));

    nexttile; hold on;
    set(gca,'ColorOrder',[stim_2_color;stim_1_color+stim_2_color]);
    bar(unit_responsive_mean,'stacked');
    ylabel('Frac. responsive units');
    legend(["R","C+R"]);
    title(curr_celltype);

end

ap.prettyfig;

% Plot example PSTHs

% (grab example units to plot)
plot_unit_prctile = 80;
for curr_celltype = striatum_celltypes
    for curr_stim = compare_stim
        curr_units = ...
            ismember(striatum_sua_grp.domain_idx,plot_domains) & ...
            striatum_units_responsive(:,curr_stim) & ...
            ~striatum_units_responsive(:,setxor(curr_stim,compare_stim)) & ...
            striatum_sua_grp.(curr_celltype);

        curr_unit_idx = find(curr_units);
        [~,sort_idx] = sort(unit_psth_max(curr_units,curr_stim));

        curr_example_unit = curr_unit_idx(sort_idx(ceil(sum(curr_units).*plot_unit_prctile/100)));

        % (circle example units on scatter)
        [~,curr_celltype_idx] = ismember(curr_celltype,striatum_celltypes);

        scatter(h_scatter(curr_celltype_idx), ...
            unit_psth_max(curr_example_unit,2),unit_psth_max(curr_example_unit,3), ...
            45,[0.5,0.5,0.5],'linewidth',2);

        [~,curr_stim_idx] = ismember(curr_stim,compare_stim);
        example_units(curr_celltype_idx,curr_stim_idx) = curr_example_unit;
    end
end

% (load and plot example units)
figure('Name',sprintf('Fig 4 %d%%ile',plot_unit_prctile));
h_units = tiledlayout(1,numel(example_units));
for curr_unit = reshape(example_units',1,[])
    animal = ephys.animal{striatum_sua_grp.rec(curr_unit)};
    rec_day = ephys.rec_day{striatum_sua_grp.rec(curr_unit)};
    unit_id = striatum_sua_grp.unit_id(curr_unit);

    task_flag = true; % (plot task activity)
    quiescence_flag = false; % (plot all trials in passive);
    AP_longstriatum_psth_fig(animal,rec_day,unit_id,task_flag,quiescence_flag,h_units);    
end
xlim(vertcat(h_units.Children.Children),[-0.1,0.5])
unit_plots = {h_units.Children.Children};
raster_plots = cellfun(@(x) x(1:end-1),unit_plots,'uni',false);
linkaxes(vertcat(raster_plots{:}),'y');
ap.prettyfig;


% ~~~ STATS ~~~
n_shuff = 10000;
print_stat('\n--FIG 4--\n');
for curr_celltype = striatum_celltypes

    % Compare R+C overlap to shuffling R/C responsiveness
    use_units = ismember(striatum_sua_grp.domain_idx,plot_domains) & ...
        striatum_sua_grp.(curr_celltype);

    [~,~,overlap_shuff_grp] = unique([ ...
        striatum_sua_grp.animal, ...
        unit_plot_day_grp, ...
        striatum_sua_grp.domain_idx, ...
        any(striatum_units_responsive(:,compare_stim),2) & ...
        striatum_sua_grp.(curr_celltype)],'rows');

    responsive_overlap_meas = mean(ap.groupfun(@mean, ...
        +(all(striatum_units_responsive(use_units,compare_stim),2)), ...
        striatum_sua_grp.animal(use_units)));

    responsive_overlap_shuff = nan(n_shuff,1);
    for curr_shuff = 1:n_shuff
        striatum_units_responsive_shuff = ap.shake(striatum_units_responsive(use_units,:),1,overlap_shuff_grp(use_units));
        responsive_overlap_shuff(curr_shuff) = mean(ap.groupfun(@mean, ...
            +(all(striatum_units_responsive_shuff(:,compare_stim),2)), ...
            striatum_sua_grp.animal(use_units)));
    end

    stat_rank = tiedrank([responsive_overlap_meas;responsive_overlap_shuff]);
    stat_p = stat_rank(1)/(n_shuff+1);

    stat_sig = discretize(stat_p < 0.05,[0,1,Inf],["","*"]);
    print_stat('%s R+C overlap vs shuffle: p = %.2g%s\n',curr_celltype, ...
        stat_p,stat_sig);

    % Compare R fraction (R-only and R+C) across days
    for curr_compare_day = 1:length(plot_day_bins)-2

        compare_day_grps = curr_compare_day+[0,1];

        use_units = ismember(striatum_sua_grp.domain_idx,plot_domains) & ...
            ismember(unit_plot_day_grp,compare_day_grps) & ...
            striatum_sua_grp.(curr_celltype);

        [~,~,r_shuff_grp] = unique([striatum_sua_grp.animal, ...
            striatum_sua_grp.domain_idx, ...
            striatum_sua_grp.(curr_celltype)],'rows');

        r_frac_meas = diff(ap.nestgroupfun({@mean,@mean}, ...
            +(all(striatum_units_responsive(use_units,3),2)), ...
            striatum_sua_grp.animal(use_units),unit_plot_day_grp(use_units)));

        r_frac_shuff = nan(n_shuff,1);
        for curr_shuff = 1:n_shuff
            unit_plot_day_grp_shuff = ap.shake(unit_plot_day_grp(use_units,:),1,r_shuff_grp(use_units));
            r_frac_shuff(curr_shuff) = diff(ap.nestgroupfun({@mean,@mean}, ...
                +(all(striatum_units_responsive(use_units,3),2)), ...
                striatum_sua_grp.animal(use_units),unit_plot_day_grp_shuff));
        end

        stat_rank = tiedrank([r_frac_meas;r_frac_shuff]);
        stat_p = 1-stat_rank(1)/(n_shuff+1);

        stat_sig = discretize(stat_p < 0.05,[0,1,Inf],["","*"]);
        print_stat('%s R-frac day %d vs %d: p = %.2g%s\n',curr_celltype,compare_day_grps,stat_p,stat_sig);
    end

end


%% [Supp. Fig 1A-B] Example wheel velocity

animal = 'AM021';

use_workflow = 'stim_wheel*';
recordings = plab.find_recordings(animal,[],use_workflow);

plot_days = [2,length(recordings)];

surround_time = [-2,2];
surround_sample_rate = 100;
surround_time_points = surround_time(1):1/surround_sample_rate:surround_time(2);

figure('Name','Fig S1 example wheel');
h = tiledlayout(2,2,'TileSpacing','tight');
for curr_day = plot_days

    % Load data
    rec_day = recordings(curr_day).day;
    rec_time = recordings(curr_day).recording{end};
    load_parts = struct;
    load_parts.behavior = true;
    ap.load_recording;

    % Plot example wheel velocity
    plot_t = [220,285]; % s, example time to plot
    plot_t_idx = isbetween(timelite.timestamps,plot_t(1),plot_t(2));

    nexttile;
    plot(timelite.timestamps(plot_t_idx),wheel_velocity(plot_t_idx),'k','linewidth',1);
    xline(stimOn_times(isbetween(stimOn_times,plot_t(1),plot_t(2))),'g');
    xline(stimOff_times(isbetween(stimOff_times,plot_t(1),plot_t(2))),'r');
    xline(reward_times(isbetween(reward_times,plot_t(1),plot_t(2))),'b');
        
    % Plot stim-aligned wheel velocity
    align_times = stimOn_times;
    pull_times = align_times + surround_time_points;
    event_aligned_wheel_vel = interp1(timelite.timestamps,wheel_velocity,pull_times);

    nexttile;
    imagesc(surround_time_points,[],event_aligned_wheel_vel);
    xline(0,'k');
    clim(4500.*[-1,1])
    colormap(gca,ap.colormap('BWR'));

end

linkaxes(h.Children(1:2:end),'xy');
linkaxes(h.Children(2:2:end),'xy');

ap.prettyfig;


%% [Supp. Fig 1D] P(stim|move)

animals = { ...
    'AM011','AM012','AM014','AM015','AM016','AM017', ...
    'AM018','AM019','AM021','AM022','AM026','AM029', ...
    'AP023','AP025'};

use_stat = 'mean';

% Grab learning day for each mouse
bhv = struct;

for curr_animal_idx = 1:length(animals)

    animal = animals{curr_animal_idx};

    use_workflow = 'stim_wheel_right_stage\d';
    recordings = plab.find_recordings(animal,[],use_workflow);

    n_bins = 3;

    move_rate = nan(length(recordings),n_bins);
    p_cue_given_move = nan(length(recordings),n_bins);
    rxn_stat_p = nan(length(recordings),1);

    for curr_recording = 1:length(recordings)

        % Grab pre-load vars
        preload_vars = who;

        % Load data
        rec_day = recordings(curr_recording).day;
        rec_time = recordings(curr_recording).recording{end};
        load_parts = struct;
        load_parts.behavior = true;
        ap.load_recording;

        % Get P(cue|wheel_move)
        move_onsets = timelite.timestamps(diff(wheel_move) == 1);
        move_onset_prev_stim = interp1(stimOn_times,stimOn_times,move_onsets,'previous','extrap');
        move_prevstim_t = move_onsets - move_onset_prev_stim;

        move_poststim = move_prevstim_t < 0.4;

        % Bin by time within session
        session_bin_edges = linspace(timelite.timestamps(1),timelite.timestamps(end),n_bins+1);
        move_session_bins = discretize(move_onsets,session_bin_edges);

        move_rate(curr_recording,:) = ap.groupfun(@length,+move_poststim,move_session_bins)./diff(session_bin_edges)';
        p_cue_given_move(curr_recording,:) = ap.groupfun(@mean,+move_poststim,move_session_bins);

        % Get association stat
        [rxn_stat_p(curr_recording), ...
            rxn_stat(curr_recording),rxn_null_stat(curr_recording)] = ...
            AP_stimwheel_association_pvalue( ...
            stimOn_times,trial_events,stim_to_move,use_stat);

    end

    bhv(curr_animal_idx).move_rate = move_rate;
    bhv(curr_animal_idx).p_cue_given_move = p_cue_given_move;
    bhv(curr_animal_idx).rxn_stat_p = rxn_stat_p;

    % Clear vars except pre-load for next loop
    clearvars('-except',preload_vars{:});
    AP_print_progress_fraction(curr_recording,length(recordings));

end

ld = cellfun(@(x) ((1:size(x,1)) - find(x<0.05,1))',{bhv.rxn_stat_p}','uni',false);
use_animals = ~cellfun(@isempty,ld);

move_rate_cat = cell2mat({bhv(use_animals).move_rate}');
p_c2m_cat = cell2mat({bhv(use_animals).p_cue_given_move}');

ld_cat = cell2mat(ld(use_animals));
ld_split = ld_cat + linspace(0,(n_bins-1)/n_bins,n_bins);

[move_rate_avg,move_rate_grp] = ap.groupfun(@mean,move_rate_cat(:),ld_split(:));
move_rate_sem = ap.groupfun(@AP_sem,move_rate_cat(:),ld_split(:));

[p_c2m_avg,p_c2m_avg_grp] = ap.groupfun(@mean,p_c2m_cat(:),ld_split(:));
p_c2m_sem = ap.groupfun(@AP_sem,p_c2m_cat(:),ld_split(:));

figure('Name','Fig S1 p stim move'); tiledlayout(2,1);

nexttile; 
errorbar( ...
    padarray(reshape(move_rate_grp,n_bins,[]),[1,0],NaN,'post'), ...
    padarray(reshape(move_rate_avg,n_bins,[]),[1,0],NaN,'post'), ...
    padarray(reshape(move_rate_sem,n_bins,[]),[1,0],NaN,'post'),'k','linewidth',2);
xlabel('Learned day')
ylabel(' Move n');
xline(0,'r');

nexttile;
errorbar( ...
    padarray(reshape(p_c2m_avg_grp,n_bins,[]),[1,0],NaN,'post'), ...
    padarray(reshape(p_c2m_avg,n_bins,[]),[1,0],NaN,'post'), ...
    padarray(reshape(p_c2m_sem,n_bins,[]),[1,0],NaN,'post'),'k','linewidth',2);
xlabel('Learned day')
ylabel('P(stim|move)');
xline(0,'r');

ap.prettyfig;


%% [Supp. Fig 2A] Histology slices

animals = [ ...
    "AM011","AM012","AM014","AM015","AM016","AM017", ...
    "AM018","AM019","AM021","AM022","AM026","AM029", ...
    "AP023","AP025"];

% (manually selected slice with probe tract for each animal)
animal_slices = [ ...
    6, 5, 8, 2, 5, 8, ...
    6, 5, 3, 3, 4, 3, ...
    4, 3];

figure('Name','Fig 2 histology'); h = tiledlayout('flow','TileSpacing','tight');

for curr_animal_idx = 1:length(animals)

    animal = animals(curr_animal_idx);
    use_slice = animal_slices(curr_animal_idx);

    % Just load all images
    histology_path = plab.locations.filename('server',animal,[],[],'histology');
    histology_dir = dir(fullfile(histology_path,'*.tif'));

    histology_filenames = cellfun(@(path,name) fullfile(path,name), ...
        {histology_dir.folder},{histology_dir.name},'uni',false);
    [~,sort_idx] = natsortfiles(histology_filenames);

    histology_im = tiffreadVolume(histology_filenames{sort_idx(use_slice)});
   
    % Plot slice as RGB
    chan_cols = [0,1,0;1,0,0];

    chan_clim = double(prctile(histology_im,[10,90],[1,2])).*[1;2];

    histology_im_rgb = min(1,sum(cell2mat(arrayfun(@(chan) ...
        mat2gray(histology_im(:,:,chan),chan_clim(:,:,chan)).* ...
        permute(chan_cols(chan,:),[1,3,2]), ...
        permute(1:n_chan,[1,3,4,2]),'uni',false)),4));

    nexttile; 
    image(histology_im_rgb); 
    axis image off;

end

ap.prettyfig;


%% [Supp. Fig 3x] Striatal domain clustering and classification

%%% Load data for figure
load_dataset = 'noact';
AP_longstriatum_load_data;
%%%

% Choose animal and day to plot
use_animal = 'AM026';
use_ld = 0;
use_rec = strcmp(bhv.animal,use_animal) & bhv.days_from_learning == use_ld;
use_cortex_kernel = ctx_str_maps.cortex_striatum_map{use_rec};

domain_color = {'R','G','B'};

% Plot all domains
% (grayscale and colored by domain)
figure('Name','Fig S3 map examples');
h = tiledlayout(size(use_cortex_kernel,3),2,'TileSpacing','none');
for curr_depth=1:size(use_cortex_kernel, 3)
    nexttile;
    imagesc(use_cortex_kernel(:,:,curr_depth));
    axis image off;
    ap.wf_draw('cortex',[0.5,0.5,0.5]);
    colormap(gca,ap.colormap('WK',[],2));

    nexttile;
    imagesc(use_cortex_kernel(:,:,curr_depth));
    axis image off
    ap.wf_draw('cortex',[0.5,0.5,0.5]);
    colormap(gca,ap.colormap(['W' domain_color{domain_idx_rec{use_rec}(curr_depth)}],[],2));
end
clim(h.Children,[0,0.01]);
ap.prettyfig;

% Plot domain means and ROIs
striatum_wf_roi_outlines = ...
    arrayfun(@(curr_domain) ...
    bwboundaries(striatum_wf_roi(:,:,curr_domain)),1:n_domains);

figure('Name','Fig S3 domain maps');
h = tiledlayout(n_domains,1,'tilespacing','none');
for curr_domain = 1:n_domains
    nexttile;
    imagesc(kmeans_cluster_mean(:,:,curr_domain));
    axis image off
    colormap(gca,ap.colormap(['W',domain_color{curr_domain}],[],2));
    ap.wf_draw('cortex',[0.5,0.5,0.5]);

    patch(striatum_wf_roi_outlines{curr_domain}(:,2), ...
        striatum_wf_roi_outlines{curr_domain}(:,1),'w', ...
        'FaceColor','none','EdgeColor','y','linewidth',2);
end
clim(h.Children,[0,0.01]);
ap.prettyfig;

% Load data from example recording
animal = bhv.animal{use_rec};
rec_day = bhv.rec_day{use_rec};
recordings = plab.find_recordings(animal,rec_day,'stim_wheel*');
rec_time = recordings.recording{end};
load_parts.ephys = true;
ap.load_recording;

% Plot units and overlay clustering
figure('Name','Fig S3 example units'); 
ax = axes; hold on;

domain_color_rgb = [1,0,0;0,1,0;0,0,1];
domain_im = permute(domain_color_rgb(domain_idx_rec{use_rec},:),[1,3,2]);
imagesc(ax,[],ctx_str_maps.depth_group_edges{use_rec},domain_im);
ax.YDir = 'reverse';

ap.plot_unit_depthrate(spike_times_timelite,spike_templates,template_depths,[],ax);
yline(ctx_str_maps.depth_group_edges{use_rec},'linewidth',2,'color',[0.5,0.5,0.5]);

ap.prettyfig;

% Plot clustered MUA
depth_group = discretize(spike_depths,ctx_str_maps.depth_group_edges{use_rec});

plot_t = [100,140];
bin_t = 0.1;
domain_mua = zeros(n_domains,diff(plot_t)/bin_t);
for curr_domain = 1:n_domains
    curr_spikes = spike_times_timelite(isbetween(spike_times_timelite,plot_t(1),plot_t(2)) & ...
        ismember(depth_group,find(domain_idx_rec{use_rec} == curr_domain)));
    domain_mua(curr_domain,:) = histcounts(curr_spikes,plot_t(1):bin_t:plot_t(2))./bin_t;
end

figure('Name','Fig S3 example mua');
plot(conv(plot_t(1):bin_t:plot_t(2),[0.5,0.5],'valid'),domain_mua','linewidth',2);
set(gca,'ColorOrder',domain_color_rgb);
axis off;
ap.scalebar(10,500);
ap.prettyfig

%% [Supp. Fig  5] Striatum cell type properties 

% Load ephys properties
data_path = fullfile(plab.locations.server_path,'Lab','Papers','Marica_2025','data');
load(fullfile(data_path,'ephys_properties'));

% Concatenate data
striatum_celltypes = ["msn","fsi","tan"];

striatum_celltype_cat.msn = logical(vertcat(ephys_properties.str_msn_idx{:}));
striatum_celltype_cat.fsi = logical(vertcat(ephys_properties.str_fsi_idx{:}));
striatum_celltype_cat.tan = logical(vertcat(ephys_properties.str_tan_idx{:}));

waveform_norm_cat = vertcat(ephys_properties.waveform{:})./max(abs(vertcat(ephys_properties.waveform{:})),[],2);

acg_cat = vertcat(ephys_properties.acg{:});
acg_t = -500:500; % (just hardcoding - it's set somewhere in bombcell)

waveform_duration_cat = vertcat(ephys_properties.waveformDuration_peakTrough_us{:});
postspike_suppression_cat = vertcat(ephys_properties.postSpikeSuppression_ms{:});
firing_rate_cat = vertcat(ephys_properties.mean_firingRate{:});

% (remove units that are likely light artifacts)
framerate = 70;
light_artifact_units = max(acg_cat(:,acg_t<-200),[],2) > framerate;
for curr_celltype = striatum_celltypes
    striatum_celltype_cat.(curr_celltype)(light_artifact_units) = false;
end

figure('Name','Fig S5 celltype features');
h = tiledlayout(length(striatum_celltypes),2);
for curr_celltype = striatum_celltypes
    nexttile;
    ap.errorfill([],nanmean(waveform_norm_cat(striatum_celltype_cat.(curr_celltype),:),1), ...
        nanstd(waveform_norm_cat(striatum_celltype_cat.(curr_celltype),:),1));

    nexttile;
    ap.errorfill(acg_t,nanmean(acg_cat(striatum_celltype_cat.(curr_celltype),:),1), ...
        nanstd(acg_cat(striatum_celltype_cat.(curr_celltype),:),1));
end
linkaxes(h.Children(1:2:end),'xy');
linkaxes(h.Children(2:2:end),'xy');
xlim(h.Children(1),[-1,1].*300);
ylim(h.Children(1),[0,50]);
ap.prettyfig;

% Histograms of properties
figure('Name','Fig S5 celltype histograms'); tiledlayout(length(striatum_celltypes),3);
for curr_celltype = striatum_celltypes
    nexttile; 
    histogram(waveform_duration_cat(striatum_celltype_cat.(curr_celltype)), ...
        linspace(0,prctile(waveform_duration_cat,99),20), ...
        'normalization','probability', ...
        'FaceColor','k','FaceAlpha',1,'EdgeColor','none');
    xlabel('Waveform duration'); xline(400,'r','linewidth',2);
    title(curr_celltype);

    nexttile; 
    histogram(postspike_suppression_cat(striatum_celltype_cat.(curr_celltype)), ...
        linspace(0,prctile(postspike_suppression_cat,99),20), ...
        'normalization','probability', ...
        'FaceColor','k','FaceAlpha',1,'EdgeColor','none');
    xlabel('Postspike suppression'); xline(40,'r','linewidth',2);
    title(curr_celltype);

    nexttile; 
    histogram(firing_rate_cat(striatum_celltype_cat.(curr_celltype)), ...
        linspace(0,prctile(firing_rate_cat,99),20), ...
        'normalization','probability', ...
        'FaceColor','k','FaceAlpha',1,'EdgeColor','none');
    xlabel('Firing rate');
    title(curr_celltype);
end
ap.prettyfig;

% Plot number/fraction of units
celltype_rec_n = cell2mat(arrayfun(@(x) cellfun(@(celltype,str) sum(celltype(str)), ...
    ephys_properties.(sprintf('str_%s_idx',x)), ...
    ephys_properties.striatal_units),striatum_celltypes,'uni',false));

celltype_rec_frac = cell2mat(arrayfun(@(x) cellfun(@(celltype,str) mean(celltype(str)), ...
    ephys_properties.(sprintf('str_%s_idx',x)), ...
    ephys_properties.striatal_units),striatum_celltypes,'uni',false));

figure('Name','Fig S5 celltype n'); tiledlayout(1,2);
nexttile; hold on;
bar(striatum_celltypes,nanmean(celltype_rec_n,1));
errorbar(categorical(striatum_celltypes),nanmean(celltype_rec_n,1), ...
    nanstd(celltype_rec_n,1),'k', ...
    'LineStyle','none','LineWidth',2,'CapSize',0);
ylabel('Number of units')

nexttile; hold on;
bar(striatum_celltypes,nanmean(celltype_rec_frac,1));
errorbar(categorical(striatum_celltypes),nanmean(celltype_rec_frac,1), ...
    nanstd(celltype_rec_frac,1),'k', ...
    'LineStyle','none','LineWidth',2,'CapSize',0);
ylabel('Fraction of units');

ap.prettyfig;

% ~~ SAVE FIGS ~~
% If flag set: save and close figs
if exist('fig_save_flag','var') && fig_save_flag
    open_figs = findall(0,'Type','figure');
    for curr_fig = open_figs'
        curr_fig_fn = fullfile(fig_savepath,strrep(curr_fig.Name,' ','_'));
        saveas(curr_fig,curr_fig_fn,'fig');
        close(curr_fig);
    end
end

save_fig = @() arrayfun(@(curr_fig) saveas(curr_fig,fullfile(fig_savepath,strrep(curr_fig.Name,' ','_')),'fig'),findall(0,'Type','figure'));


save_fig = @() arrayfun(@(curr_fig) saveas(curr_fig,fullfile(fig_savepath,strrep(curr_fig.Name,' ','_')),'fig'),findall(0,'Type','figure'));

saveas(curr_fig,fullfile(fig_savepath,strrep(curr_fig.Name,' ','_')),'fig')
%% (end timer)

% Close stat file
if fig_save_flag
    fclose(stat_fid);
end

toc







