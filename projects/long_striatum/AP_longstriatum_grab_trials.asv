%% Grab

%% Set parameters

% Trial time to grab
trial_t_window = [-0.5,1];
trial_t_rate = 50;
trial_t = sample_window(1):1/trial_t_rate:sample_window(2);

align_t = reshape(stimOn_times,[],1);
interp_t = align_t + trial_t;

% Widefield components to keep 
n_wf_components = 200;

% Striatum multiunit chunk size
striatum_mua_length = 200; % um

% Check if task or passive
if contains(bonsai_workflow,'wheel')
    task_workflow = true;
elseif contains(bonsai_workflow,'passive')
    task_workflow = false;
else
    error('Bonsai workflow "%s": not "wheel" or "passive"',bonsai_workflow);
end

% Create structure for trial data
trial_data = struct;

%% Trial information

if task_workflow
    % Task parameters
    trial_data.stim_to_move = stim_to_move;

elseif ~task_workflow
    % Passive parameters
    trial_data.stim = vertcat(trial_events.values.TrialStimX);
end


%% Wheel

trial_data.wheel_velocity = interp1(timelite.timestamps, ...
    wheel_velocity,interp_t);

trial_data.wheel_move = interp1(timelite.timestamps, ...
    +wheel_move,interp_t,'previous');


%% Striatum MUA (in length chunks)

% Find striatum boundaries: 
% start = lowest unit density; end = end of probe
unit_density_bins = 0:100:3840;
unit_density = histcounts(template_depths,unit_density_bins);
[~,unit_density_min_bottom_idx] = min(fliplr(unit_density));
unit_density_min_idx = length(unit_density_bins) - unit_density_min_bottom_idx;
template_depths_sorted = sort(template_depths);
str_start =  template_depths_sorted(find(template_depths_sorted >= ...
    unit_density_bins(unit_density_min_idx+1),1));
str_end = max(channel_positions(:,2));

% Discretize spikes by depth
depth_group_edges = str_start:striatum_mua_length:str_end;
if length(depth_group_edges) > 2
    spike_depth_group = discretize(spike_depths,depth_group_edges);
else
    error('Only one striatum MUA bin?');
end
n_depths = max(spike_depth_group);

% Get trial PSTH
[~,trial_data.striatum_mua] =  ap.ephys_psth(spike_times_timelite, ...
    align_t,spike_depth_group, ...
    'window',trial_t_window,'bin_size',1/trial_t_rate);


%% Cortical widefield

trial_data.widefield = interp1(wf_t,wf_V(1:n_wf_components,:)',interp_t);



























