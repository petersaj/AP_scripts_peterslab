%% SANDBOX
%
% dev/test code

%% Load data (specific day)
clear all

% animal = 'AP019';
% rec_day = '2024-05-06';

% load_parts.widefield = true;
% load_parts.ephys = true;
% load_parts.mousecam = true;

verbose = true;
ap.load_recording;


%% Load data (relative day)

animal = 'AM014';

% workflow = 'lcr_passive';
% workflow = 'lcr_passive_fullscreen';
workflow = 'stim_wheel_right*';
% workflow = 'sparse_noise';
% workflow = 'visual_conditioning*';
% workflow = 'hml_passive_audio';

recordings = plab.find_recordings(animal,[],workflow);

% (include only ephys days)
% recordings = recordings([recordings.ephys]);

use_day = 2;
% use_day = length(recordings);

rec_day = recordings(use_day).day;
rec_time = recordings(use_day).recording{end};

verbose = true;

% load_parts.mousecam = true;
% load_parts.widefield = true;
load_parts.ephys = true;


ap.load_recording;

%% Testing MCMS API

% MCMS API documentation is here:
% Production: https://oxford.colonymanagement.org/api/swagger-ui/index.html
% Test: https://oxford-uat.colonymanagement.org/api/swagger-ui/index.html

% Get authentication token

% (production)
basicUrl = 'https://oxford.colonymanagement.org/api';
% (test database)
% basicUrl = 'https://oxford-uat.colonymanagement.org/api';
authenticateEndpoint = [basicUrl '/authenticate'];

usr = 'ap7';
psw = 'Bluecookiejar';

headers = struct;
headers.Accept = '*/*';
headers.username = usr;
headers.password = psw;

header_cell = [fieldnames(headers),struct2cell(headers)];

options = weboptions( ...
    'MediaType','application/json', ...
    'ContentType','json', ...
    'RequestMethod','post', ...
    'HeaderFields',header_cell);
mcms_token = webread(authenticateEndpoint,options);


% Get procedure list

proceduresEndpoint = [basicUrl '/procedures'];
headers = struct;
headers.Accept = 'application/json';
headers.Authorization = ['Bearer ' mcms_token.token];

header_cell = [fieldnames(headers),struct2cell(headers)];

options = weboptions( ...
    'MediaType','application/json', ...
    'ContentType','json', ...
    'HeaderFields',header_cell);

data = webread(proceduresEndpoint,options);

% Get weights

curr_animal = '02150140';

endpoint = [basicUrl '/animalweights/animal/' curr_animal];
headers = struct;
headers.Accept = 'application/json';
headers.Authorization = ['Bearer ' mcms_token.token];

header_cell = [fieldnames(headers),struct2cell(headers)];

options = weboptions( ...
    'MediaType','application/json', ...
    'ContentType','json', ...
    'HeaderFields',header_cell);

data = webread(endpoint,options);


data_timestamps = datetime({data.sampleDate},'InputFormat','yyyy-MM-dd''T''HH:mm:ss.SSSZ','TimeZone','local');

[~,sort_idx] = sort(data_timestamps);
[data(sort_idx).weightValue]


% Get animal via name
curr_animal = 'TOAA2.1d';
endpoint = [basicUrl '/animals/name/' curr_animal];
headers = struct;
headers.Accept = 'application/json';
headers.Authorization = ['Bearer ' mcms_token.token];

header_cell = [fieldnames(headers),struct2cell(headers)];

options = weboptions( ...
    'MediaType','application/json', ...
    'ContentType','json', ...
    'HeaderFields',header_cell);

data = webread(endpoint,options);


% Get project licenses

endpoint = [basicUrl '/projectlicenses'];
headers = struct;
headers.Accept = 'application/json';
headers.Authorization = ['Bearer ' mcms_token.token];

header_cell = [fieldnames(headers),struct2cell(headers)];

options = weboptions( ...
    'MediaType','application/json', ...
    'ContentType','json', ...
    'HeaderFields',header_cell);

data = webread(endpoint,options);

% Cohort history
curr_animal = '2152600';
endpoint = [basicUrl '/animalcohorthistory/animal/' curr_animal];
headers = struct;
headers.Accept = 'application/json';
headers.Authorization = ['Bearer ' mcms_token.token];

header_cell = [fieldnames(headers),struct2cell(headers)];

options = weboptions( ...
    'MediaType','application/json', ...
    'ContentType','json', ...
    'HeaderFields',header_cell);

data = webread(endpoint,options);


%% temp histology: combine jpg channels

hist_path = "P:\Data\AP004\histology";
save_path = "C:\Users\petersa\Desktop\test_histology";
for slice = 1:8
    curr_g_filename = fullfile(hist_path,sprintf('thalamus_%d_g.jpg',slice));
    curr_r_filename = fullfile(hist_path,sprintf('thalamus_%d_r.jpg',slice));

    curr_g = imread(curr_g_filename);
    curr_r = imread(curr_r_filename);

    curr_gr = curr_g + curr_r*3;

    curr_gr_filename = fullfile(save_path,sprintf('%d.tif',slice));
    imwrite(curr_gr,curr_gr_filename);
end

%% temp histology: combine tiff channels

hist_path = plab.locations.filename('server','AM022',[],[],'histology','raw');
save_path = plab.locations.filename('server','AM022',[],[],'histology','raw_combined');

im_filenames = dir(fullfile(hist_path,'*.tif'));
if ~exist(save_path,'dir')
    mkdir(save_path)
end

slice_name_split = regexp({im_filenames.name},'_','split');
slice_name_split_cat = vertcat(slice_name_split{:});

if size(slice_name_split_cat,2) == 2

    slice_num = unique(slice_name_split_cat(:,1));
    im_colors = unique(slice_name_split_cat(:,2));

    for curr_slice = 1:length(slice_num)
        curr_save_filename = fullfile(save_path,sprintf('%s.tif',slice_num{curr_slice}));
        for curr_color = 1:length(im_colors)
            curr_im_filename = fullfile(hist_path,sprintf('%s_%s', ...
                slice_num{curr_slice},im_colors{curr_color}));
            curr_im = imread(curr_im_filename);
            imwrite(curr_im,curr_save_filename,'tif','WriteMode','append');
        end
    end

elseif size(slice_name_split_cat,2) == 3
    
    animal = cell2mat(unique(slice_name_split_cat(:,1)));
    slice_num = unique(slice_name_split_cat(:,2));
    im_colors = unique(slice_name_split_cat(:,3));

    for curr_slice = 1:length(slice_num)
        curr_save_filename = fullfile(save_path,sprintf('%s_%s.tif',animal,slice_num{curr_slice}));
        for curr_color = 1:length(im_colors)
            curr_im_filename = fullfile(hist_path,sprintf('%s_%s_%s', ...
                animal,slice_num{curr_slice},im_colors{curr_color}));
            curr_im = imread(curr_im_filename);
            imwrite(curr_im,curr_save_filename,'tif','WriteMode','append');
        end
    end
end


%% temp histology: convert single jpeg to tiff

hist_path = "P:\Data\AP009\histology";
save_path = "C:\Users\petersa\Desktop\test_histology";
for slice = 1:18
    curr_filename = fullfile(hist_path,sprintf('%d.jpg',slice));
    curr_im = imread(curr_filename);

    curr_im = curr_im.*5;

    curr_save_filename = fullfile(save_path,sprintf('%d.tif',slice));
    imwrite(curr_im,curr_save_filename);
end





%% Load/average/align to create master average blue/violet image

retinotopy_dir = dir(fullfile('\\qnap-ap001.dpag.ox.ac.uk\APlab\Users\Andy_Peters\widefield_alignment\retinotopy','*.mat'));

animals = cellfun(@(x) x(end-8:end-4),{retinotopy_dir.name},'uni',false);

avg_im_all = cell(length(animals),2);
for curr_animal = 1:length(animals)

    animal = animals{curr_animal};

    recordings = plab.find_recordings(animal);
    wf_days_idx = cellfun(@(x) any(x),{recordings.widefield});
    wf_recordings = recordings(wf_days_idx);

    avg_im_aligned = cell(length(wf_recordings),2);
    for curr_day = 1:length(wf_recordings)
        try
        day = wf_recordings(curr_day).day;

        img_path = plab.locations.filename('server', ...
            animal,day,[],'widefield');

        avg_im_n = readNPY([img_path filesep 'meanImage_blue.npy']);
        avg_im_h = readNPY([img_path filesep 'meanImage_violet.npy']);

        avg_im_aligned{curr_day,1} = ap.wf_align(avg_im_n,animal,day);
        avg_im_aligned{curr_day,2} = ap.wf_align(avg_im_h,animal,day);
        catch me
            continue
        end
    end

    avg_im_all{curr_animal,1} = nanmean(cat(3,avg_im_aligned{:,1}),3);
    avg_im_all{curr_animal,2} = nanmean(cat(3,avg_im_aligned{:,2}),3);

    AP_print_progress_fraction(curr_animal,length(animals));

end

blue_avg = nanmean(cat(3,avg_im_all{:,1}),3);
violet_avg = nanmean(cat(3,avg_im_all{:,2}),3);


%% Create master corr areas

retinotopy_dir = dir(fullfile('\\qnap-ap001.dpag.ox.ac.uk\APlab\Users\Andy_Peters\widefield_alignment\retinotopy','*.mat'));

animals = cellfun(@(x) x(end-8:end-4),{retinotopy_dir.name},'uni',false);

corrmap_all = cell(length(animals),1);
for curr_animal = 1:length(animals)

    animal = animals{curr_animal};

    % Check for animal alignment (skip if not)
    alignment_path = fullfile(plab.locations.server_path,'Lab','widefield_alignment');
    alignment_path_animal = fullfile(alignment_path,'animal_alignment');
    alignment_filename = fullfile(alignment_path_animal,sprintf('wf_alignment_%s.mat',animal));
    if exist(alignment_filename,'file')
        curr_align = load(alignment_filename);
        if ~isfield(curr_align.wf_tform,'animal_tform')
            continue
        end
    else
        continue
    end

    recordings = plab.find_recordings(animal,[],'sparse_noise');
    use_recording = find(~[recordings.ephys],1);

    rec_day = recordings(use_recording).day;
    rec_time = recordings(use_recording).recording{1};
    ap.load_recording;

    % Get V covariance
    Ur = reshape(wf_U, size(wf_U,1)*size(wf_U,2),[]); % P x S
    covV = cov(wf_V'); % S x S % this is the only one that takes some time really
    varP = dot((Ur*covV)', Ur'); % 1 x P

    ySize = size(wf_U,1); xSize = size(wf_U,2);

    px_spacing = 30;
    use_y = 1:px_spacing:size(wf_U,1);
    use_x = 1:px_spacing:size(wf_U,2);
    corr_map = cell(length(use_y),length(use_x));
    for curr_x_idx = 1:length(use_x)
        curr_x = use_x(curr_x_idx);
        for curr_y_idx = 1:length(use_y)
            curr_y = use_y(curr_y_idx);

            pixel = [curr_y,curr_x];
            pixelInd = sub2ind([ySize, xSize], pixel(1), pixel(2));

            covP = Ur(pixelInd,:)*covV*Ur'; % 1 x P
            stdPxPy = varP(pixelInd).^0.5 * varP.^0.5; % 1 x P
            corrMat = reshape(covP./stdPxPy,ySize,xSize); % 1 x P

            corr_map{curr_y_idx,curr_x_idx} = corrMat;
        end
    end

    % Get downsampled correlation maps
    downsample_factor = 10;
    corr_map_downsamp = cellfun(@(x) ...
        imresize(x,1/downsample_factor,'bilinear'),corr_map,'uni',false);

    a = cat(3,corr_map_downsamp{:});



    AP_print_progress_fraction(curr_animal,length(animals));

end

%%%%%%%%%% just running below first

% aligned
animal = 'AM011';
rec_day = '2023-12-01';
rec_time = '1155';
ap.load_recording;

Ur = reshape(wf_U, size(wf_U,1)*size(wf_U,2),[]); % P x S
covV = cov(wf_V'); % S x S % this is the only one that takes some time really
varP = dot((Ur*covV)', Ur'); % 1 x P

ySize = size(wf_U,1); xSize = size(wf_U,2);

px_spacing = 30;
use_y = 1:px_spacing:size(wf_U,1);
use_x = 1:px_spacing:size(wf_U,2);
corr_map = cell(length(use_y),length(use_x));
for curr_x_idx = 1:length(use_x)
    curr_x = use_x(curr_x_idx);
    for curr_y_idx = 1:length(use_y)
        curr_y = use_y(curr_y_idx);

        pixel = [curr_y,curr_x];
        pixelInd = sub2ind([ySize, xSize], pixel(1), pixel(2));

        covP = Ur(pixelInd,:)*covV*Ur'; % 1 x P
        stdPxPy = varP(pixelInd).^0.5 * varP.^0.5; % 1 x P
        corrMat = reshape(covP./stdPxPy,ySize,xSize); % 1 x P

        corr_map{curr_y_idx,curr_x_idx} = corrMat;
    end
end
aligned_corr = cat(3,corr_map{:});


% unaligned
animal = 'AM014';
rec_day = '2024-01-17';
rec_time = '1151';
ap.load_recording;

Ur = reshape(wf_U, size(wf_U,1)*size(wf_U,2),[]); % P x S
covV = cov(wf_V'); % S x S % this is the only one that takes some time really
varP = dot((Ur*covV)', Ur'); % 1 x P

ySize = size(wf_U,1); xSize = size(wf_U,2);

px_spacing = 30;
use_y = 1:px_spacing:size(wf_U,1);
use_x = 1:px_spacing:size(wf_U,2);
corr_map = cell(length(use_y),length(use_x));
for curr_x_idx = 1:length(use_x)
    curr_x = use_x(curr_x_idx);
    for curr_y_idx = 1:length(use_y)
        curr_y = use_y(curr_y_idx);

        pixel = [curr_y,curr_x];
        pixelInd = sub2ind([ySize, xSize], pixel(1), pixel(2));

        covP = Ur(pixelInd,:)*covV*Ur'; % 1 x P
        stdPxPy = varP(pixelInd).^0.5 * varP.^0.5; % 1 x P
        corrMat = reshape(covP./stdPxPy,ySize,xSize); % 1 x P

        corr_map{curr_y_idx,curr_x_idx} = corrMat;
    end
end
unaligned_corr = cat(3,corr_map{:});


% get just 2d correlation
% (will probably have to symmetrize and rotate first...)



% % Pad images in the set (adjust padding strategy as needed)
% paddingSize = [size(referenceImage, 1) - size(imageSet{1}, 1), ...
%     size(referenceImage, 2) - size(imageSet{1}, 2)] / 2;
% imageSet = cellfun(@(x) padarray(x, paddingSize, 'constant'), imageSet, ...
%     'UniformOutput', false);



downsample_factor = 10;
referenceImage = imresize(unaligned_corr,1/downsample_factor);
imageSet = imresize(aligned_corr,1/downsample_factor);
img_match = nan(size(referenceImage,3),1);
for curr_ref_idx = 1:size(referenceImage,3)

    curr_ref = referenceImage(:,:,curr_ref_idx);

    % Loop through each image in the set
    correlations = zeros(size(imageSet,3),1);
    for image_idx = 1:size(imageSet,3)

        curr_img = imageSet(:,:,image_idx);
        curr_img(isnan(curr_img)) = 0;

        % Perform normalized cross-correlation for all rotations
        for angle = -5:1:5
            rotatedImage = imrotate(curr_img, angle,'bilinear');
            corr = normxcorr2(curr_ref, rotatedImage);
            correlations(image_idx) = max(max(corr,[],'all'),correlations(image_idx));
        end
    end
    [~,img_match(curr_ref_idx)] = max(correlations);

    ap.print_progress_fraction(curr_ref_idx,size(referenceImage,3));
end

x1 = referenceImage(:,:,~isnan(img_match));
x2 = imageSet(:,:,img_match(~isnan(img_match)));

x1(:,41:43,:) = 0;

ap.imscroll([x1,x2]);axis image;

% to do: maybe juts use one to figure out angle, then get best xcorr



% corr map edge detection
corr_map_cat = aligned_corr.^3;
corr_map_cat(isnan(corr_map_cat)) = 0;
aligned_corr_edges = nanmean(imfilter(corr_map_cat,fspecial('disk',20),'replicate') - ...
    imfilter(corr_map_cat,fspecial('disk',50),'replicate'),3);

corr_map_cat = unaligned_corr.^3;
corr_map_cat(isnan(corr_map_cat)) = 0;
unaligned_corr_edges = nanmean(imfilter(corr_map_cat,fspecial('disk',20),'replicate') - ...
    imfilter(corr_map_cat,fspecial('disk',50),'replicate'),3);


figure; tiledlayout('flow');
nexttile;imagesc(aligned_corr_edges);axis image;
nexttile;imagesc(unaligned_corr_edges);axis image;





% Align animal image to master image
im_unaligned = mat2gray(unaligned_corr_edges);
master_align = mat2gray(aligned_corr_edges);

ref_size = size(master_align);

[optimizer, metric] = imregconfig('monomodal');
optimizer = registration.optimizer.OnePlusOneEvolutionary();
optimizer.MaximumIterations = 200;
optimizer.GrowthFactor = 1+1e-6;
optimizer.InitialRadius = 1e-3;

im_tform = imregtform(im_unaligned,master_align,'similarity',optimizer,metric);
im_aligned = imwarp(im_unaligned,im_tform,'Outputview',imref2d(ref_size));

figure;
tiledlayout(1,2,'TileSpacing','tight');
nexttile;
imshowpair(master_align,im_unaligned);
title('Unaligned');
nexttile;
imshowpair(master_align,im_aligned);
title('Aligned');

a = cat(3,im_aligned,master_align);
ap.imscroll(a);axis image;
















